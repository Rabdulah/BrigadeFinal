{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","self-start-front-end/tests/app.lint-test.js","self-start-front-end/tests/helpers/destroy-app.js","self-start-front-end/tests/helpers/module-for-acceptance.js","self-start-front-end/tests/helpers/resolver.js","self-start-front-end/tests/helpers/start-app.js","self-start-front-end/tests/integration/components/add-country-test.js","self-start-front-end/tests/integration/components/add-gender-test.js","self-start-front-end/tests/integration/components/add-patient-test.js","self-start-front-end/tests/integration/components/add-province-test.js","self-start-front-end/tests/integration/components/add-status-test.js","self-start-front-end/tests/integration/components/admin-nav-test.js","self-start-front-end/tests/integration/components/back-to-top-test.js","self-start-front-end/tests/integration/components/delete-country-test.js","self-start-front-end/tests/integration/components/delete-gender-test.js","self-start-front-end/tests/integration/components/delete-patient-test.js","self-start-front-end/tests/integration/components/delete-province-test.js","self-start-front-end/tests/integration/components/delete-status-test.js","self-start-front-end/tests/integration/components/edit-country-test.js","self-start-front-end/tests/integration/components/edit-gender-test.js","self-start-front-end/tests/integration/components/edit-patient-test.js","self-start-front-end/tests/integration/components/edit-status-test.js","self-start-front-end/tests/integration/components/nav-bar-test.js","self-start-front-end/tests/integration/components/welcome-page-test.js","self-start-front-end/tests/test-helper.js","self-start-front-end/tests/tests.lint-test.js","self-start-front-end/tests/unit/adapters/application-test.js","self-start-front-end/tests/unit/controllers/home-test.js","self-start-front-end/tests/unit/models/city-test.js","self-start-front-end/tests/unit/models/country-test.js","self-start-front-end/tests/unit/models/gender-test.js","self-start-front-end/tests/unit/models/marital-status-test.js","self-start-front-end/tests/unit/models/patient-test.js","self-start-front-end/tests/unit/models/provinces-test.js","self-start-front-end/tests/unit/routes/city-test.js","self-start-front-end/tests/unit/routes/country-test.js","self-start-front-end/tests/unit/routes/gender-test.js","self-start-front-end/tests/unit/routes/home-test.js","self-start-front-end/tests/unit/routes/manage-selections-test.js","self-start-front-end/tests/unit/routes/marital-status-test.js","self-start-front-end/tests/unit/routes/new-patient-test.js","self-start-front-end/tests/unit/routes/patients-test.js","self-start-front-end/tests/unit/routes/province-test.js","self-start-front-end/tests/unit/routes/update-patient-test.js","self-start-front-end/tests/unit/serializers/application-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('self-start-front-end/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-province.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/add-province.js should pass ESLint\\n\\n3:10 - \\'computed\\' is defined but never used. (no-unused-vars)\\n41:15 - \\'newProvince\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/add-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/admin-nav.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/admin-nav.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/back-to-top.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/back-to-top.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-province.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-province.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/edit-country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/edit-gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/edit-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/edit-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/nav-bar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/nav-bar.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/welcome-page.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/welcome-page.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/city.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/city.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/marital-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/marital-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/province.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/province.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/city.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/city.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/home.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/home.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/manage-selections.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/manage-selections.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/marital-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/marital-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/new-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/new-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/patients.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/patients.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/province.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/province.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/update-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/update-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transitions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transitions.js should pass ESLint\\n\\n');\n  });\n});","define('self-start-front-end/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('self-start-front-end/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'self-start-front-end/tests/helpers/start-app', 'self-start-front-end/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('self-start-front-end/tests/helpers/resolver', ['exports', 'self-start-front-end/resolver', 'self-start-front-end/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('self-start-front-end/tests/helpers/start-app', ['exports', 'self-start-front-end/app', 'self-start-front-end/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('self-start-front-end/tests/integration/components/add-country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-country', 'Integration | Component | add country', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"YreBgUG/\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-country\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"xKW7HffP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-country\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-gender', 'Integration | Component | add gender', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6EERLDCg\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-gender\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"TyEM9K/M\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-gender\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-patient', 'Integration | Component | add patient', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"BcWXyeh/\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-patient\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DGXfZ60C\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-patient\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-province-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-province', 'Integration | Component | add province', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"IGketj3e\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-province\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"L0oHGqY3\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-province\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-status-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-status', 'Integration | Component | add status', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"IY4yZuLb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-status\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"CTZqDfGX\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-status\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/admin-nav-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('admin-nav', 'Integration | Component | admin nav', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"4JDfKsjG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"admin-nav\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"JW31Rcy9\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"admin-nav\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/back-to-top-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('back-to-top', 'Integration | Component | back to top', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kvDsRgkj\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"back-to-top\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DEQE/DCb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"back-to-top\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-country', 'Integration | Component | delete country', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yFqis0JG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-country\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"jnQYPzSi\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-country\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-gender', 'Integration | Component | delete gender', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"uWtaKLC4\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-gender\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Hn6cu5dC\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-gender\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-patient', 'Integration | Component | delete patient', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"j/bNDXeV\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-patient\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"lj1Yj4pZ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-patient\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-province-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-province', 'Integration | Component | delete province', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"pnFar+Bs\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-province\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2rdbFEPD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-province\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-status-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-status', 'Integration | Component | delete status', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Q4f7Wzo3\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-status\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"0UY6um29\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-status\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-country', 'Integration | Component | edit country', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Pu7OVRNf\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-country\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3JRpMSCM\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-country\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-gender', 'Integration | Component | edit gender', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yLPAh9hy\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-gender\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Mroo1qHS\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-gender\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-patient', 'Integration | Component | edit patient', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"MXLac/7p\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-patient\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3s24u8FD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-patient\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-status-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-status', 'Integration | Component | edit status', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6N+gOTR4\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-status\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3VyO1ORm\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-status\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/nav-bar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('nav-bar', 'Integration | Component | nav bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"23Mh82eG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"nav-bar\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"rwhJAS6T\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"nav-bar\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/welcome-page-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('welcome-page', 'Integration | Component | welcome page', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"CH1+OELU\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"welcome-page\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"I47iY4+0\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"welcome-page\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/test-helper', ['self-start-front-end/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('self-start-front-end/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-province-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-province-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-status-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-status-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/admin-nav-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/admin-nav-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/back-to-top-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/back-to-top-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-province-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-province-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-status-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-status-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-status-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-status-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/nav-bar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/nav-bar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/welcome-page-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/welcome-page-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/home-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/city-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/city-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/marital-status-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/marital-status-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/provinces-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/provinces-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/city-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/city-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/home-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/manage-selections-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/manage-selections-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/marital-status-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/marital-status-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/new-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/patients-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/patients-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/province-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/province-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/update-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/update-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n});","define('self-start-front-end/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('self-start-front-end/tests/unit/controllers/home-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:home', 'Unit | Controller | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('self-start-front-end/tests/unit/models/city-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('city', 'Unit | Model | city', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('country', 'Unit | Model | country', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('gender', 'Unit | Model | gender', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/marital-status-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('marital-status', 'Unit | Model | marital status', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('patient', 'Unit | Model | patient', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/provinces-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('provinces', 'Unit | Model | provinces', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/routes/city-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:city', 'Unit | Route | city', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:country', 'Unit | Route | country', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:gender', 'Unit | Route | gender', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/home-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:home', 'Unit | Route | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/manage-selections-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:manage-selections', 'Unit | Route | manage selections', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/marital-status-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:marital-status', 'Unit | Route | marital status', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/new-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:new-patient', 'Unit | Route | new patient', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/patients-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:patients', 'Unit | Route | patients', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/province-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:province', 'Unit | Route | province', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/update-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:update-patient', 'Unit | Route | update patient', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/serializers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","require('self-start-front-end/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;","file":"tests.js"}