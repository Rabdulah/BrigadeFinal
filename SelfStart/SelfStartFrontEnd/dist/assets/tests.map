{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","self-start-front-end/tests/app.lint-test.js","self-start-front-end/tests/helpers/destroy-app.js","self-start-front-end/tests/helpers/ember-power-select.js","self-start-front-end/tests/helpers/ember-sortable/test-helpers.js","self-start-front-end/tests/helpers/module-for-acceptance.js","self-start-front-end/tests/helpers/resolver.js","self-start-front-end/tests/helpers/responsive.js","self-start-front-end/tests/helpers/start-app.js","self-start-front-end/tests/integration/components/add-admin-test.js","self-start-front-end/tests/integration/components/add-country-test.js","self-start-front-end/tests/integration/components/add-form-test.js","self-start-front-end/tests/integration/components/add-gender-test.js","self-start-front-end/tests/integration/components/add-patient-test.js","self-start-front-end/tests/integration/components/add-physiotherapist-test.js","self-start-front-end/tests/integration/components/add-question-test.js","self-start-front-end/tests/integration/components/add-rehabplan-test.js","self-start-front-end/tests/integration/components/admin-nav-test.js","self-start-front-end/tests/integration/components/admin-table-test.js","self-start-front-end/tests/integration/components/admin-welcome-test.js","self-start-front-end/tests/integration/components/assign-rehabplan-test.js","self-start-front-end/tests/integration/components/back-to-top-test.js","self-start-front-end/tests/integration/components/book-appointment-test.js","self-start-front-end/tests/integration/components/client-file-test.js","self-start-front-end/tests/integration/components/config-selection-test.js","self-start-front-end/tests/integration/components/confirm-booking-test.js","self-start-front-end/tests/integration/components/delete-admin-test.js","self-start-front-end/tests/integration/components/delete-country-test.js","self-start-front-end/tests/integration/components/delete-exercises-test.js","self-start-front-end/tests/integration/components/delete-form-test.js","self-start-front-end/tests/integration/components/delete-gender-test.js","self-start-front-end/tests/integration/components/delete-patient-test.js","self-start-front-end/tests/integration/components/delete-physiotherapist-test.js","self-start-front-end/tests/integration/components/delete-province-test.js","self-start-front-end/tests/integration/components/delete-question-test.js","self-start-front-end/tests/integration/components/delete-rehabplan-test.js","self-start-front-end/tests/integration/components/display-assessment-test.js","self-start-front-end/tests/integration/components/display-forms-test.js","self-start-front-end/tests/integration/components/display-questions-test.js","self-start-front-end/tests/integration/components/edit-admin-test.js","self-start-front-end/tests/integration/components/edit-country-test.js","self-start-front-end/tests/integration/components/edit-exercises-test.js","self-start-front-end/tests/integration/components/edit-form-test.js","self-start-front-end/tests/integration/components/edit-gender-test.js","self-start-front-end/tests/integration/components/edit-patient-test.js","self-start-front-end/tests/integration/components/edit-physiotherapist-test.js","self-start-front-end/tests/integration/components/edit-province-test.js","self-start-front-end/tests/integration/components/edit-rehabplan-test.js","self-start-front-end/tests/integration/components/get-answers-test.js","self-start-front-end/tests/integration/components/list-forms-test.js","self-start-front-end/tests/integration/components/manage-admin-accounts-test.js","self-start-front-end/tests/integration/components/manage-exercises-test.js","self-start-front-end/tests/integration/components/manage-form-test.js","self-start-front-end/tests/integration/components/manage-patients-test.js","self-start-front-end/tests/integration/components/manage-questions-test.js","self-start-front-end/tests/integration/components/modify-question-test.js","self-start-front-end/tests/integration/components/nav-bar-test.js","self-start-front-end/tests/integration/components/parse-question-test.js","self-start-front-end/tests/integration/components/physio-nav-test.js","self-start-front-end/tests/integration/components/physio-table-test.js","self-start-front-end/tests/integration/components/physio-welcome-test.js","self-start-front-end/tests/integration/components/register-user-test.js","self-start-front-end/tests/integration/components/rehab-plan-test.js","self-start-front-end/tests/integration/components/rehab-table-test.js","self-start-front-end/tests/integration/components/show-form-questions-test.js","self-start-front-end/tests/integration/components/show-patient-test.js","self-start-front-end/tests/integration/components/simple-example-test.js","self-start-front-end/tests/integration/components/upload-file-test.js","self-start-front-end/tests/integration/components/user-info-test.js","self-start-front-end/tests/integration/components/user-login-test.js","self-start-front-end/tests/integration/components/view-appointment-test.js","self-start-front-end/tests/integration/components/view-schedule-test.js","self-start-front-end/tests/integration/components/welcome-page-test.js","self-start-front-end/tests/integration/helpers/compare-test.js","self-start-front-end/tests/integration/helpers/increment-q-num-test.js","self-start-front-end/tests/integration/helpers/index-plus-one-test.js","self-start-front-end/tests/integration/helpers/indexpicker-test.js","self-start-front-end/tests/integration/helpers/input-identification-test.js","self-start-front-end/tests/integration/helpers/is-equal-test.js","self-start-front-end/tests/integration/helpers/mc-display-test.js","self-start-front-end/tests/integration/helpers/number-of-mc-test.js","self-start-front-end/tests/test-helper.js","self-start-front-end/tests/tests.lint-test.js","self-start-front-end/tests/unit/adapters/application-test.js","self-start-front-end/tests/unit/controllers/form-display-test.js","self-start-front-end/tests/unit/controllers/home-test.js","self-start-front-end/tests/unit/controllers/new-patient-test.js","self-start-front-end/tests/unit/controllers/practitioner/assessment-display-test.js","self-start-front-end/tests/unit/controllers/questions-test.js","self-start-front-end/tests/unit/controllers/rehabplans-test.js","self-start-front-end/tests/unit/initializers/doc-test.js","self-start-front-end/tests/unit/initializers/home-test.js","self-start-front-end/tests/unit/mixins/table-common-test.js","self-start-front-end/tests/unit/models/administrator-test.js","self-start-front-end/tests/unit/models/answer-test.js","self-start-front-end/tests/unit/models/appointment-test.js","self-start-front-end/tests/unit/models/assessment-test-test.js","self-start-front-end/tests/unit/models/city-test.js","self-start-front-end/tests/unit/models/country-test.js","self-start-front-end/tests/unit/models/exercise-list-test.js","self-start-front-end/tests/unit/models/exercise-test.js","self-start-front-end/tests/unit/models/form-test.js","self-start-front-end/tests/unit/models/gender-test.js","self-start-front-end/tests/unit/models/image-test.js","self-start-front-end/tests/unit/models/marital-status-test.js","self-start-front-end/tests/unit/models/patient-test.js","self-start-front-end/tests/unit/models/physiotherapest-test.js","self-start-front-end/tests/unit/models/provinces-test.js","self-start-front-end/tests/unit/models/question-order-test.js","self-start-front-end/tests/unit/models/question-test.js","self-start-front-end/tests/unit/models/rehab-client-link-test.js","self-start-front-end/tests/unit/models/rehabilitationplan-test.js","self-start-front-end/tests/unit/routes/admin-test.js","self-start-front-end/tests/unit/routes/admin/accounts-test.js","self-start-front-end/tests/unit/routes/admin/admin-welcome-test.js","self-start-front-end/tests/unit/routes/admin/forms-test.js","self-start-front-end/tests/unit/routes/admin/manage-accounts-test.js","self-start-front-end/tests/unit/routes/admin/manage-selections-test.js","self-start-front-end/tests/unit/routes/appointment-test.js","self-start-front-end/tests/unit/routes/city-test.js","self-start-front-end/tests/unit/routes/dashboard-test.js","self-start-front-end/tests/unit/routes/exercise-test.js","self-start-front-end/tests/unit/routes/exercises-test.js","self-start-front-end/tests/unit/routes/form-display-test.js","self-start-front-end/tests/unit/routes/forms-test.js","self-start-front-end/tests/unit/routes/home-test.js","self-start-front-end/tests/unit/routes/images-test.js","self-start-front-end/tests/unit/routes/message-test.js","self-start-front-end/tests/unit/routes/new-exercise-test.js","self-start-front-end/tests/unit/routes/new-patient-test.js","self-start-front-end/tests/unit/routes/new-rehabplans-test.js","self-start-front-end/tests/unit/routes/patient-file-test.js","self-start-front-end/tests/unit/routes/patients-test.js","self-start-front-end/tests/unit/routes/physiotherapists-test.js","self-start-front-end/tests/unit/routes/practitioner/appointment-test.js","self-start-front-end/tests/unit/routes/practitioner/assessment-display-test.js","self-start-front-end/tests/unit/routes/practitioner/client-file-test.js","self-start-front-end/tests/unit/routes/practitioner/clients-test.js","self-start-front-end/tests/unit/routes/practitioner/edit-menu-test.js","self-start-front-end/tests/unit/routes/practitioner/exercises-test.js","self-start-front-end/tests/unit/routes/practitioner/new-rehabplans-test.js","self-start-front-end/tests/unit/routes/practitioner/rehabplans-test.js","self-start-front-end/tests/unit/routes/province-test.js","self-start-front-end/tests/unit/routes/questions-test.js","self-start-front-end/tests/unit/routes/register-test.js","self-start-front-end/tests/unit/routes/rehabplans-test.js","self-start-front-end/tests/unit/routes/update-patient-test.js","self-start-front-end/tests/unit/serializers/application-test.js","self-start-front-end/tests/unit/serializers/patient-test.js","self-start-front-end/tests/unit/services/doc-test.js","self-start-front-end/tests/unit/services/home-test.js","self-start-front-end/tests/unit/utils/file-object-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('self-start-front-end/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('breakpoints.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'breakpoints.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-admin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-admin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-exercises.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/add-exercises.js should pass ESLint\\n\\n90:11 - Unexpected console statement. (no-console)\\n155:7 - Unexpected console statement. (no-console)\\n156:11 - \\'self\\' is assigned a value but never used. (no-unused-vars)\\n175:13 - \\'saveImage\\' is assigned a value but never used. (no-unused-vars)\\n176:9 - Unexpected console statement. (no-console)\\n177:9 - Unexpected console statement. (no-console)\\n178:9 - Unexpected console statement. (no-console)\\n180:11 - Unexpected console statement. (no-console)\\n230:7 - Unexpected console statement. (no-console)\\n232:7 - Unexpected console statement. (no-console)\\n236:7 - Unexpected console statement. (no-console)\\n239:11 - Unexpected console statement. (no-console)\\n247:11 - Unexpected console statement. (no-console)\\n248:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/add-form-question.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-form-question.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/add-form.js should pass ESLint\\n\\n22:17 - \\'form\\' is assigned a value but never used. (no-unused-vars)\\n27:13 - Unexpected console statement. (no-console)\\n36:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/add-gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-physiotherapist.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-physiotherapist.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-province.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-province.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-question.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-question.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-rehabplan.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-rehabplan.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/admin-nav.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/admin-nav.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/admin-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/admin-table.js should pass ESLint\\n\\n66:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/admin-welcome.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/admin-welcome.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/assign-rehabplan.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/assign-rehabplan.js should pass ESLint\\n\\n55:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/back-to-top.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/back-to-top.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/book-appointment.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/book-appointment.js should pass ESLint\\n\\n9:16 - \\'Ember\\' is not defined. (no-undef)\\n10:18 - \\'Ember\\' is not defined. (no-undef)\\n11:16 - \\'Ember\\' is not defined. (no-undef)\\n17:14 - \\'Ember\\' is not defined. (no-undef)\\n22:14 - \\'Ember\\' is not defined. (no-undef)\\n42:37 - \\'occurrence\\' is defined but never used. (no-unused-vars)\\n52:64 - \\'isPreview\\' is defined but never used. (no-unused-vars)\\n53:7 - Unexpected console statement. (no-console)\\n67:40 - \\'occurrence\\' is defined but never used. (no-unused-vars)\\n73:31 - \\'Ember\\' is not defined. (no-undef)\\n74:31 - \\'Ember\\' is not defined. (no-undef)\\n94:52 - \\'Ember\\' is not defined. (no-undef)\\n113:29 - \\'Ember\\' is not defined. (no-undef)\\n126:42 - \\'Ember\\' is not defined. (no-undef)\\n143:7 - Unexpected console statement. (no-console)\\n152:30 - \\'Ember\\' is not defined. (no-undef)\\n163:11 - \\'physio\\' is assigned a value but never used. (no-unused-vars)\\n171:9 - Unexpected console statement. (no-console)\\n187:19 - Unexpected console statement. (no-console)\\n197:19 - Unexpected console statement. (no-console)\\n208:19 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/client-file.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/client-file.js should pass ESLint\\n\\n30:5 - Unexpected console statement. (no-console)\\n74:5 - Unexpected console statement. (no-console)\\n119:11 - \\'assign\\' is assigned a value but never used. (no-unused-vars)\\n125:7 - \\'rehabplan\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('components/config-selection.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/config-selection.js should pass ESLint\\n\\n73:5 - Unexpected console statement. (no-console)\\n91:8 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/confirm-booking.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/confirm-booking.js should pass ESLint\\n\\n26:41 - \\'qid\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/delete-admin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-admin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-exercises.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-exercises.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-physiotherapist.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-physiotherapist.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-province.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-province.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-question.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-question.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-rehabplan.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-rehabplan.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/display-assessment.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/display-assessment.js should pass ESLint\\n\\n4:7 - \\'Ember\\' is not defined. (no-undef)\\n8:20 - \\'Ember\\' is not defined. (no-undef)\\n15:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/display-forms.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/display-forms.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/display-questions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/display-questions.js should pass ESLint\\n\\n4:9 - \\'Ember\\' is not defined. (no-undef)\\n8:16 - \\'Ember\\' is not defined. (no-undef)\\n16:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/edit-admin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-admin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/edit-country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/edit-exercises.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/edit-exercises.js should pass ESLint\\n\\n108:11 - Unexpected console statement. (no-console)\\n116:7 - Unexpected console statement. (no-console)\\n117:7 - Unexpected console statement. (no-console)\\n118:7 - Unexpected console statement. (no-console)\\n130:7 - Unexpected console statement. (no-console)\\n132:7 - Unexpected console statement. (no-console)\\n138:7 - Unexpected console statement. (no-console)\\n160:13 - Unexpected console statement. (no-console)\\n167:15 - \\'self\\' is assigned a value but never used. (no-unused-vars)\\n176:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/edit-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/edit-form.js should pass ESLint\\n\\n4:9 - \\'Ember\\' is not defined. (no-undef)\\n6:12 - \\'Ember\\' is not defined. (no-undef)\\n7:19 - \\'Ember\\' is not defined. (no-undef)\\n9:16 - \\'Ember\\' is not defined. (no-undef)\\n17:9 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('components/edit-gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/edit-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/edit-physiotherapist.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-physiotherapist.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/edit-province.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-province.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/edit-rehabplan.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/edit-rehabplan.js should pass ESLint\\n\\n70:9 - \\'a\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/edit-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/get-answers.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/get-answers.js should pass ESLint\\n\\n18:7 - Unexpected console statement. (no-console)\\n34:7 - Unexpected console statement. (no-console)\\n51:7 - Unexpected console statement. (no-console)\\n69:7 - Unexpected console statement. (no-console)\\n72:92 - \\'rec\\' is defined but never used. (no-unused-vars)\\n92:7 - Unexpected console statement. (no-console)\\n109:7 - Unexpected console statement. (no-console)\\n126:7 - Unexpected console statement. (no-console)\\n144:7 - Unexpected console statement. (no-console)\\n161:7 - Unexpected console statement. (no-console)\\n178:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/list-forms.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/list-forms.js should pass ESLint\\n\\n20:41 - \\'element\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/manage-admin-accounts.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/manage-admin-accounts.js should pass ESLint\\n\\n74:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/manage-exercises.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/manage-exercises.js should pass ESLint\\n\\n12:7 - Unexpected console statement. (no-console)\\n23:7 - Unexpected console statement. (no-console)\\n34:7 - Unexpected console statement. (no-console)\\n43:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/manage-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/manage-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/manage-patients.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/manage-patients.js should pass ESLint\\n\\n70:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/manage-questions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/manage-questions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/modify-question.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/modify-question.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/nav-bar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/nav-bar.js should pass ESLint\\n\\n3:10 - \\'computed\\' is defined but never used. (no-unused-vars)\\n34:7 - Unexpected console statement. (no-console)\\n134:11 - Unexpected console statement. (no-console)\\n136:13 - Unexpected console statement. (no-console)\\n145:13 - Unexpected console statement. (no-console)\\n155:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/parse-question.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/parse-question.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/physio-nav.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/physio-nav.js should pass ESLint\\n\\n15:431 - \\'SkypeButton\\' is not defined. (no-undef)\\n15:472 - \\'SkypeButton\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('components/physio-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/physio-table.js should pass ESLint\\n\\n70:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/physio-welcome.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/physio-welcome.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/register-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/register-user.js should pass ESLint\\n\\n38:30 - Unnecessary escape character: \\\\[. (no-useless-escape)\\n38:55 - Unnecessary escape character: \\\\[. (no-useless-escape)\\n40:11 - Unexpected console statement. (no-console)\\n66:9 - Unexpected console statement. (no-console)\\n91:9 - Unexpected console statement. (no-console)\\n114:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/rehab-plan.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/rehab-plan.js should pass ESLint\\n\\n218:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/rehab-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/rehab-table.js should pass ESLint\\n\\n31:5 - Unexpected console statement. (no-console)\\n85:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/show-form-questions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/show-form-questions.js should pass ESLint\\n\\n15:13 - Unexpected console statement. (no-console)\\n27:26 - \\'fid\\' is defined but never used. (no-unused-vars)\\n28:17 - \\'thisForm\\' is assigned a value but never used. (no-unused-vars)\\n35:13 - Unexpected console statement. (no-console)\\n39:13 - Unexpected console statement. (no-console)\\n40:13 - Unexpected console statement. (no-console)\\n46:13 - Unexpected console statement. (no-console)\\n69:13 - Unexpected console statement. (no-console)\\n72:21 - \\'x\\' is already defined. (no-redeclare)');\n  });\n\n  QUnit.test('components/show-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/show-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/simple-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/simple-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/upload-file.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/upload-file.js should pass ESLint\\n\\n94:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/user-info.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/user-info.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/user-login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/user-login.js should pass ESLint\\n\\n3:10 - \\'computed\\' is defined but never used. (no-unused-vars)\\n10:9 - \\'Ember\\' is not defined. (no-undef)\\n14:9 - \\'self\\' is assigned a value but never used. (no-unused-vars)\\n34:7 - Unexpected console statement. (no-console)\\n55:11 - Unexpected console statement. (no-console)\\n57:13 - Unexpected console statement. (no-console)\\n66:13 - Unexpected console statement. (no-console)\\n76:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/view-appointment.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/view-appointment.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/view-schedule.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/view-schedule.js should pass ESLint\\n\\n4:8 - \\'$\\' is defined but never used. (no-unused-vars)\\n8:16 - \\'Ember\\' is not defined. (no-undef)\\n11:18 - \\'Ember\\' is not defined. (no-undef)\\n12:16 - \\'Ember\\' is not defined. (no-undef)\\n31:23 - \\'Ember\\' is not defined. (no-undef)\\n38:7 - Unexpected console statement. (no-console)\\n47:7 - Unexpected console statement. (no-console)\\n56:7 - Unexpected console statement. (no-console)\\n57:7 - Unexpected console statement. (no-console)\\n66:31 - \\'Ember\\' is not defined. (no-undef)\\n67:31 - \\'Ember\\' is not defined. (no-undef)\\n85:52 - \\'Ember\\' is not defined. (no-undef)\\n93:28 - \\'Ember\\' is not defined. (no-undef)\\n152:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/welcome-page.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/welcome-page.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/form-display.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/form-display.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/new-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/new-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/practitioner/assessment-display.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/practitioner/assessment-display.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/questions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/questions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/rehabplans.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/rehabplans.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/compare.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/compare.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/increment-q-num.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/increment-q-num.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/index-plus-one.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/index-plus-one.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/indexpicker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/indexpicker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/input-identification.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/input-identification.js should pass ESLint\\n\\n8:3 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('helpers/is-equal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-equal.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/mc-display.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/mc-display.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/number-of-mc.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/number-of-mc.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/doc.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/doc.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/home.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/home.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/responsive.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/responsive.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/administrator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/administrator.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/answer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/answer.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/appointment.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/appointment.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/assessment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/assessment-test.js should pass ESLint\\n\\n2:10 - \\'empty\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('models/city.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/city.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/exercise-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/exercise-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/exercise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/exercise.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/image.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/image.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/marital-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/marital-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/physiotherapest.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/physiotherapest.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/province.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/province.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/question-order.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/question-order.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/question.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/question.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/rehab-client-link.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/rehab-client-link.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/rehabilitationplan.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/rehabilitationplan.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/accounts.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/accounts.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/admin-welcome.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/admin-welcome.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/forms.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/forms.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/manage-accounts.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/manage-accounts.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin/manage-selections.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/manage-selections.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/appointment.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/appointment.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/city.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/city.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/dashboard.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/dashboard.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/exercise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/exercise.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/exercises.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/exercises.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/form-display.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/form-display.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/forms.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/forms.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/home.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/home.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/images.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/images.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/message.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/message.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/new-exercise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/new-exercise.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/new-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/new-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/new-rehabplans.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/new-rehabplans.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/patient-file.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/patient-file.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/patients.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/patients.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/physiotherapists.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/physiotherapists.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/practitioner/appointment.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/practitioner/appointment.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/practitioner/assessment-display.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/practitioner/assessment-display.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/practitioner/client-file.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/practitioner/client-file.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/practitioner/clients.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/practitioner/clients.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/practitioner/edit-menu.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/practitioner/edit-menu.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/practitioner/exercises.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/practitioner/exercises.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/practitioner/new-rehabplans.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/practitioner/new-rehabplans.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/practitioner/rehabplans.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/practitioner/rehabplans.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/province.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/province.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/questions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/questions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/register.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/rehabplans.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rehabplans.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/update-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/update-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/doc.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/doc.js should pass ESLint\\n\\n16:7 - \\'$document\\' is assigned a value but never used. (no-unused-vars)\\n17:7 - \\'$sortableTables\\' is assigned a value but never used. (no-unused-vars)\\n23:7 - \\'$ui\\' is assigned a value but never used. (no-unused-vars)\\n26:7 - \\'$hideMenu\\' is assigned a value but never used. (no-unused-vars)\\n27:7 - \\'$search\\' is assigned a value but never used. (no-unused-vars)\\n29:7 - \\'$demo\\' is assigned a value but never used. (no-unused-vars)\\n66:7 - \\'$sidebarButton\\' is assigned a value but never used. (no-unused-vars)\\n143:13 - \\'$modal\\' is assigned a value but never used. (no-unused-vars)\\n155:37 - \\'shortcuts\\' is not defined. (no-undef)\\n156:26 - \\'shortcuts\\' is not defined. (no-undef)\\n193:39 - \\'calculations\\' is defined but never used. (no-unused-vars)\\n228:13 - \\'$activeSection\\' is assigned a value but never used. (no-unused-vars)\\n272:51 - \\'$choice\\' is defined but never used. (no-unused-vars)\\n315:31 - \\'event\\' is defined but never used. (no-unused-vars)\\n387:11 - \\'$rail\\' is assigned a value but never used. (no-unused-vars)\\n401:15 - \\'$anchor\\' is assigned a value but never used. (no-unused-vars)\\n419:21 - \\'$anchor\\' is assigned a value but never used. (no-unused-vars)\\n518:11 - Unexpected console statement. (no-console)\\n527:25 - Unexpected constant condition. (no-constant-condition)\\n559:23 - Unexpected console statement. (no-console)\\n580:13 - \\'states\\' is assigned a value but never used. (no-unused-vars)\\n584:13 - \\'html\\' is assigned a value but never used. (no-unused-vars)\\n624:45 - \\'variation\\' is defined but never used. (no-unused-vars)\\n628:45 - \\'variation\\' is defined but never used. (no-unused-vars)\\n785:15 - \\'Clipboard\\' is not defined. (no-undef)\\n859:11 - Unexpected console statement. (no-console)\\n962:41 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n987:32 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n987:38 - Unnecessary escape character: \\\\\". (no-useless-escape)\\n1029:11 - \\'codeSample\\' is already defined. (no-redeclare)\\n1031:11 - \\'existingCode\\' is assigned a value but never used. (no-unused-vars)\\n1032:11 - \\'evaluatedCode\\' is assigned a value but never used. (no-unused-vars)\\n1036:11 - \\'demo\\' is assigned a value but never used. (no-unused-vars)\\n1049:11 - \\'padding\\' is assigned a value but never used. (no-unused-vars)\\n1054:11 - \\'styledCode\\' is defined but never used. (no-unused-vars)\\n1055:11 - \\'$example\\' is defined but never used. (no-unused-vars)\\n1056:11 - \\'$label\\' is defined but never used. (no-unused-vars)\\n1057:11 - \\'codeHeight\\' is defined but never used. (no-unused-vars)\\n1059:13 - \\'entityMap\\' is assigned a value but never used. (no-unused-vars)\\n1224:5 - \\'semantic\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('services/home.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/home.js should pass ESLint\\n\\n8:5 - \\'semantic\\' is not defined. (no-undef)\\n13:7 - \\'$ui\\' is assigned a value but never used. (no-unused-vars)\\n14:7 - \\'$phrase\\' is assigned a value but never used. (no-unused-vars)\\n15:7 - \\'$download\\' is assigned a value but never used. (no-unused-vars)\\n16:7 - \\'$library\\' is assigned a value but never used. (no-unused-vars)\\n17:7 - \\'$cursor\\' is assigned a value but never used. (no-unused-vars)\\n18:7 - \\'$version\\' is assigned a value but never used. (no-unused-vars)\\n101:11 - Unexpected console statement. (no-console)\\n116:25 - Unexpected constant condition. (no-constant-condition)\\n129:13 - Unexpected console statement. (no-console)\\n138:13 - Unexpected console statement. (no-console)\\n166:31 - \\'semantic\\' is not defined. (no-undef)\\n171:25 - \\'semantic\\' is not defined. (no-undef)\\n177:40 - \\'text\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('transitions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transitions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/file-object.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/file-object.js should pass ESLint\\n\\n');\n  });\n});","define('self-start-front-end/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('self-start-front-end/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function () {\n      (true && !(false) && Ember.deprecate('DEPRECATED `import { ' + name + ' } from \\'../../tests/helpers/ember-power-select\\';` is deprecated. Please, replace it with `import { ' + name + ' } from \\'ember-power-select/test-support/helpers\\';`', false, { until: '1.11.0', id: 'ember-power-select-test-support-' + name }));\n\n      return fn.apply(undefined, arguments);\n    };\n  }\n\n  var findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('self-start-front-end/tests/helpers/ember-sortable/test-helpers', ['ember-sortable/helpers/drag', 'ember-sortable/helpers/reorder'], function () {\n  'use strict';\n});","define('self-start-front-end/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'self-start-front-end/tests/helpers/start-app', 'self-start-front-end/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('self-start-front-end/tests/helpers/resolver', ['exports', 'self-start-front-end/resolver', 'self-start-front-end/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('self-start-front-end/tests/helpers/responsive', ['exports', 'ember-responsive/media'], function (exports, _media) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.setBreakpointForIntegrationTest = setBreakpointForIntegrationTest;\n  var getOwner = Ember.getOwner;\n  var classify = Ember.String.classify;\n\n\n  _media.default.reopen({\n    // Change this if you want a different default breakpoint in tests.\n    _defaultBreakpoint: 'desktop',\n\n    _breakpointArr: Ember.computed('breakpoints', function () {\n      return Object.keys(this.get('breakpoints')) || Ember.A([]);\n    }),\n\n    _forceSetBreakpoint: function _forceSetBreakpoint(breakpoint) {\n      var found = false;\n\n      var props = {};\n      this.get('_breakpointArr').forEach(function (bp) {\n        var val = bp === breakpoint;\n        if (val) {\n          found = true;\n        }\n\n        props['is' + classify(bp)] = val;\n      });\n\n      if (found) {\n        this.setProperties(props);\n      } else {\n        throw new Error('You tried to set the breakpoint to ' + breakpoint + ', which is not in your app/breakpoint.js file.');\n      }\n    },\n    match: function match() {},\n    init: function init() {\n      this._super.apply(this, arguments);\n\n      this._forceSetBreakpoint(this.get('_defaultBreakpoint'));\n    }\n  });\n\n  exports.default = Ember.Test.registerAsyncHelper('setBreakpoint', function (app, breakpoint) {\n    // this should use getOwner once that's supported\n    var mediaService = app.__deprecatedInstance__.lookup('service:media');\n    mediaService._forceSetBreakpoint(breakpoint);\n  });\n  function setBreakpointForIntegrationTest(container, breakpoint) {\n    var mediaService = getOwner(container).lookup('service:media');\n    mediaService._forceSetBreakpoint(breakpoint);\n    container.set('media', mediaService);\n\n    return mediaService;\n  }\n});","define('self-start-front-end/tests/helpers/start-app', ['exports', 'self-start-front-end/app', 'self-start-front-end/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('self-start-front-end/tests/integration/components/add-admin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-admin', 'Integration | Component | add admin', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"O/2q2FBy\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-admin\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6kG+o76Z\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-admin\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-country', 'Integration | Component | add country', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"YreBgUG/\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-country\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"xKW7HffP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-country\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-form', 'Integration | Component | add form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Ihn44m4a\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-form\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Olta0t7i\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-form\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-gender', 'Integration | Component | add gender', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6EERLDCg\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-gender\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"TyEM9K/M\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-gender\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-patient', 'Integration | Component | add patient', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"BcWXyeh/\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-patient\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DGXfZ60C\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-patient\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-physiotherapist-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-physiotherapist', 'Integration | Component | add physiotherapist', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2L0VfaJ6\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-physiotherapist\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"oceeKh4W\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-physiotherapist\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-question-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-question', 'Integration | Component | add question', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8Uqx/0cN\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-question\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"7U/Xnr2f\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-question\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-rehabplan-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-rehabplan', 'Integration | Component | add rehabplan', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1Xzau0nh\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-rehabplan\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"W12jr0QV\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-rehabplan\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/admin-nav-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('admin-nav', 'Integration | Component | admin nav', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"4JDfKsjG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"admin-nav\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"JW31Rcy9\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"admin-nav\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/admin-table-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('admin-table', 'Integration | Component | admin table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2wNJUFgN\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"admin-table\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"vbqVwbt+\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"admin-table\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/admin-welcome-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('admin-welcome', 'Integration | Component | admin welcome', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"U4sFj7Bv\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"admin-welcome\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"hnbbgPVV\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"admin-welcome\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/assign-rehabplan-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('assign-rehabplan', 'Integration | Component | assign rehabplan', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yvHqYHdn\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"assign-rehabplan\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"YHtbe5mZ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"assign-rehabplan\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/back-to-top-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('back-to-top', 'Integration | Component | back to top', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kvDsRgkj\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"back-to-top\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DEQE/DCb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"back-to-top\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/book-appointment-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('book-appointment', 'Integration | Component | book appointment', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"NdIYnWMu\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"book-appointment\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"I23GB3If\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"book-appointment\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/client-file-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('client-file', 'Integration | Component | client file', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"xTG3N09F\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"client-file\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"LtvuQsZw\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"client-file\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/config-selection-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('config-selection', 'Integration | Component | config selection', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"bwm5g5vm\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"config-selection\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"OpO0q+BO\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"config-selection\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/confirm-booking-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('confirm-booking', 'Integration | Component | confirm booking', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"v5Lyyv2I\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"confirm-booking\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yo05rwU1\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"confirm-booking\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-admin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-admin', 'Integration | Component | delete admin', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8Sw2d7q6\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-admin\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ZU9Fv1VS\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-admin\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-country', 'Integration | Component | delete country', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yFqis0JG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-country\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"jnQYPzSi\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-country\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-exercises-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-exercises', 'Integration | Component | delete exercises', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"hNvxw1ed\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-exercises\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"nLyZAXYy\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-exercises\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-form', 'Integration | Component | delete form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6v4kecE7\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-form\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"qpHS4c0j\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-form\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-gender', 'Integration | Component | delete gender', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"uWtaKLC4\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-gender\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Hn6cu5dC\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-gender\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-patient', 'Integration | Component | delete patient', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"j/bNDXeV\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-patient\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"lj1Yj4pZ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-patient\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-physiotherapist-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-physiotherapist', 'Integration | Component | delete physiotherapist', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"qYG7IdOz\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-physiotherapist\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ZkYMjcTw\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-physiotherapist\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-province-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-province', 'Integration | Component | delete province', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"pnFar+Bs\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-province\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2rdbFEPD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-province\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-question-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-question', 'Integration | Component | delete question', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"KKV1s7w+\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-question\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ojQ4YWdb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-question\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-rehabplan-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-rehabplan', 'Integration | Component | delete rehabplan', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"j+4mWThs\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-rehabplan\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"EDtNnsrm\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-rehabplan\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/display-assessment-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('display-assessment', 'Integration | Component | display assessment', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"vNF6XzDh\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"display-assessment\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"H1aAGmtg\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"display-assessment\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/display-forms-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('display-forms', 'Integration | Component | display forms', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"rraILM8k\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"display-forms\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"NUyh5gwC\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"display-forms\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/display-questions-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('display-questions', 'Integration | Component | display questions', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ohDdx9uF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"display-questions\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"X5z97jjl\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"display-questions\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-admin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-admin', 'Integration | Component | edit admin', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"c9bIyxbb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-admin\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"jngG0+mu\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-admin\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-country', 'Integration | Component | edit country', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Pu7OVRNf\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-country\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3JRpMSCM\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-country\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-exercises-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-exercises', 'Integration | Component | edit exercises', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"EJIqNr8E\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-exercises\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"JG+BdyoB\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-exercises\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-form', 'Integration | Component | edit form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6cQfsP4N\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-form\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"aErfLX51\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-form\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-gender', 'Integration | Component | edit gender', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yLPAh9hy\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-gender\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Mroo1qHS\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-gender\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-patient', 'Integration | Component | edit patient', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"MXLac/7p\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-patient\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3s24u8FD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-patient\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-physiotherapist-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-physiotherapist', 'Integration | Component | edit physiotherapist', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kDmUYLx6\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-physiotherapist\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1jTTEcnj\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-physiotherapist\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-province-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-province', 'Integration | Component | edit province', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"aI+bs2aP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-province\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"BvoPAgYy\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-province\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-rehabplan-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-rehabplan', 'Integration | Component | edit rehabplan', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"XFCkeT+W\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-rehabplan\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"zlzl0bjs\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-rehabplan\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/get-answers-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('get-answers', 'Integration | Component | get answers', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"zgzLAcEb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"get-answers\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"u6LODeSx\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"get-answers\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/list-forms-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('list-forms', 'Integration | Component | list forms', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8foyeksP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"list-forms\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tc6nx0Xl\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"list-forms\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/manage-admin-accounts-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('manage-admin-accounts', 'Integration | Component | manage admin accounts', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"dmiQh/jX\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"manage-admin-accounts\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DL871msr\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"manage-admin-accounts\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/manage-exercises-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('manage-exercises', 'Integration | Component | manage exercises', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"UU8AdKMi\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"manage-exercises\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yOZ6U2+Z\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"manage-exercises\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/manage-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('manage-form', 'Integration | Component | manage form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3QvFGct2\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"manage-form\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"QvbIQtkp\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"manage-form\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/manage-patients-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('manage-patients', 'Integration | Component | manage patients', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1n/HdgnF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"manage-patients\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"JGFtGeSY\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"manage-patients\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/manage-questions-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('manage-questions', 'Integration | Component | manage questions', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8BDTQ4gQ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"manage-questions\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"S+BVveMN\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"manage-questions\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/modify-question-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('modify-question', 'Integration | Component | modify question', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"lnFT5Un5\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"modify-question\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"dEWRlZ9q\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"modify-question\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/nav-bar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('nav-bar', 'Integration | Component | nav bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"23Mh82eG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"nav-bar\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"rwhJAS6T\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"nav-bar\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/parse-question-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('parse-question', 'Integration | Component | parse question', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3eIW3CM9\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"parse-question\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"bmt3TjJe\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"parse-question\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/physio-nav-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('physio-nav', 'Integration | Component | physio nav', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"woaqz+bn\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"physio-nav\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"MPTj6lcw\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"physio-nav\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/physio-table-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('physio-table', 'Integration | Component | physio table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"aeo7FVGT\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"physio-table\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"9W7w9JLk\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"physio-table\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/physio-welcome-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('physio-welcome', 'Integration | Component | physio welcome', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"EPc8Pv16\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"physio-welcome\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"hs4YJNbO\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"physio-welcome\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/register-user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('register-user', 'Integration | Component | register user', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"hKd6MT++\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"register-user\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"PYr5cezl\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"register-user\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/rehab-plan-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('rehab-plan', 'Integration | Component | rehab plan', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"bUH4h35y\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"rehab-plan\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"lnoxharD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"rehab-plan\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/rehab-table-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('rehab-table', 'Integration | Component | rehab table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"dw9/kJL1\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"rehab-table\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DrcJXemg\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"rehab-table\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/show-form-questions-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('show-form-questions', 'Integration | Component | show form questions', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"mhUiiyxF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"show-form-questions\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1R3+O6DT\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"show-form-questions\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/show-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('show-patient', 'Integration | Component | show patient', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"MLS/XOTd\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"show-patient\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"CDaa3Vhz\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"show-patient\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/simple-example-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('simple-example', 'Integration | Component | simple example', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"TbZjxy9y\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"simple-example\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Hb4ZgQDk\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"simple-example\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/upload-file-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('upload-file', 'Integration | Component | upload file', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"5TkSC30a\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"upload-file\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wD6saKd7\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"upload-file\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/user-info-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('user-info', 'Integration | Component | user info', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Jp7X+uNs\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"user-info\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"xmCmKyZr\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"user-info\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/user-login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('user-login', 'Integration | Component | user login', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"eFH1vq7p\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"user-login\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"QhZwhTKz\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"user-login\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/view-appointment-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('view-appointment', 'Integration | Component | view appointment', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wHWZ+Nta\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"view-appointment\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"5E6wqLfG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"view-appointment\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/view-schedule-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('view-schedule', 'Integration | Component | view schedule', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kV5YlrR7\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"view-schedule\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"RfMug7ud\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"view-schedule\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/welcome-page-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('welcome-page', 'Integration | Component | welcome page', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"CH1+OELU\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"welcome-page\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"I47iY4+0\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"welcome-page\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/helpers/compare-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('compare', 'helper:compare', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Q+uXofJN\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"compare\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('self-start-front-end/tests/integration/helpers/increment-q-num-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('increment-q-num', 'helper:increment-q-num', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"roS5ENj3\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"increment-q-num\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('self-start-front-end/tests/integration/helpers/index-plus-one-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('index-plus-one', 'helper:index-plus-one', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DLg8u0h7\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"index-plus-one\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('self-start-front-end/tests/integration/helpers/indexpicker-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('indexpicker', 'helper:indexpicker', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6Xoked9E\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"indexpicker\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('self-start-front-end/tests/integration/helpers/input-identification-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('input-identification', 'helper:input-identification', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tz1nLuQG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"input-identification\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('self-start-front-end/tests/integration/helpers/is-equal-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('is-equal', 'helper:is-equal', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"K2xUbCcD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"is-equal\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('self-start-front-end/tests/integration/helpers/mc-display-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('mc-display', 'helper:mc-display', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DCrDRcfj\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"mc-display\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('self-start-front-end/tests/integration/helpers/number-of-mc-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('number-of-mc', 'helper:number-of-mc', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"gmYiInYv\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"number-of-mc\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('self-start-front-end/tests/test-helper', ['self-start-front-end/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit', 'self-start-front-end/tests/helpers/responsive'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('self-start-front-end/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/responsive.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/responsive.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-admin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-admin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-physiotherapist-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-physiotherapist-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-question-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-question-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-rehabplan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-rehabplan-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/admin-nav-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/admin-nav-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/admin-table-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/admin-table-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/admin-welcome-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/admin-welcome-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/assign-rehabplan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/assign-rehabplan-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/back-to-top-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/back-to-top-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/book-appointment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/book-appointment-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/client-file-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/client-file-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/config-selection-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/config-selection-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/confirm-booking-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/confirm-booking-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-admin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-admin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-exercises-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-exercises-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-physiotherapist-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-physiotherapist-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-province-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-province-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-question-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-question-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-rehabplan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-rehabplan-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/display-assessment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/display-assessment-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/display-forms-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/display-forms-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/display-questions-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/display-questions-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-admin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-admin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-exercises-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-exercises-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-physiotherapist-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-physiotherapist-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-province-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-province-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-rehabplan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-rehabplan-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/get-answers-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/get-answers-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/list-forms-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/list-forms-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/manage-admin-accounts-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/manage-admin-accounts-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/manage-exercises-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/manage-exercises-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/manage-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/manage-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/manage-patients-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/manage-patients-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/manage-questions-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/manage-questions-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/modify-question-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/modify-question-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/nav-bar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/nav-bar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/parse-question-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/parse-question-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/physio-nav-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/physio-nav-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/physio-table-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/physio-table-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/physio-welcome-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/physio-welcome-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/register-user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/register-user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/rehab-plan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rehab-plan-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/rehab-table-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rehab-table-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/show-form-questions-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/show-form-questions-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/show-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/show-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/simple-example-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/simple-example-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/upload-file-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/upload-file-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/user-info-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/user-info-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/user-login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/user-login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/view-appointment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/view-appointment-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/view-schedule-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/view-schedule-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/welcome-page-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/welcome-page-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/compare-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/compare-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/increment-q-num-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/increment-q-num-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/index-plus-one-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/index-plus-one-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/indexpicker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/indexpicker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/input-identification-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/input-identification-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/is-equal-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/is-equal-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/mc-display-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/mc-display-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/number-of-mc-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/number-of-mc-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/form-display-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/form-display-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/home-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/new-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/new-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/practitioner/assessment-display-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/practitioner/assessment-display-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/questions-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/questions-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/rehabplans-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/rehabplans-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/doc-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/doc-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/home-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/table-common-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/table-common-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/administrator-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/administrator-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/answer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/answer-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/appointment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/appointment-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/assessment-test-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/assessment-test-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/city-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/city-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/exercise-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/exercise-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/exercise-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/exercise-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/image-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/image-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/marital-status-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/marital-status-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/physiotherapest-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/physiotherapest-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/provinces-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/provinces-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/question-order-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/question-order-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/question-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/question-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/rehab-client-link-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/rehab-client-link-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/rehabilitationplan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/rehabilitationplan-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/accounts-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/accounts-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/admin-welcome-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/admin-welcome-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/forms-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/forms-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/manage-accounts-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/manage-accounts-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin/manage-selections-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/manage-selections-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/appointment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/appointment-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/city-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/city-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/dashboard-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/dashboard-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/exercise-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/exercise-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/exercises-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/exercises-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/form-display-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/form-display-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/forms-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/forms-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/home-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/images-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/images-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/message-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/message-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/new-exercise-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new-exercise-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/new-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/new-rehabplans-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new-rehabplans-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/patient-file-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/patient-file-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/patients-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/patients-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/physiotherapists-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/physiotherapists-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/practitioner/appointment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/practitioner/appointment-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/practitioner/assessment-display-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/practitioner/assessment-display-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/practitioner/client-file-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/practitioner/client-file-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/practitioner/clients-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/practitioner/clients-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/practitioner/edit-menu-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/practitioner/edit-menu-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/practitioner/exercises-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/practitioner/exercises-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/practitioner/new-rehabplans-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/practitioner/new-rehabplans-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/practitioner/rehabplans-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/practitioner/rehabplans-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/province-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/province-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/questions-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/questions-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/rehabplans-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rehabplans-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/update-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/update-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/doc-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/doc-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/home-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/file-object-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/file-object-test.js should pass ESLint\\n\\n');\n  });\n});","define('self-start-front-end/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('self-start-front-end/tests/unit/controllers/form-display-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:form-display', 'Unit | Controller | form display', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('self-start-front-end/tests/unit/controllers/home-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:home', 'Unit | Controller | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('self-start-front-end/tests/unit/controllers/new-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:new-patient', 'Unit | Controller | new patient', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('self-start-front-end/tests/unit/controllers/practitioner/assessment-display-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:practitioner/assessment-display', 'Unit | Controller | practitioner/assessment display', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('self-start-front-end/tests/unit/controllers/questions-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:questions', 'Unit | Controller | questions', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('self-start-front-end/tests/unit/controllers/rehabplans-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:rehabplans', 'Unit | Controller | rehabplans', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('self-start-front-end/tests/unit/initializers/doc-test', ['self-start-front-end/initializers/doc', 'qunit', 'self-start-front-end/tests/helpers/destroy-app'], function (_doc, _qunit, _destroyApp) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Initializer | doc', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      Ember.run(function () {\n        _this.application = Ember.Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _doc.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('self-start-front-end/tests/unit/initializers/home-test', ['self-start-front-end/initializers/home', 'qunit', 'self-start-front-end/tests/helpers/destroy-app'], function (_home, _qunit, _destroyApp) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Initializer | home', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      Ember.run(function () {\n        _this.application = Ember.Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _home.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('self-start-front-end/tests/unit/mixins/table-common-test', ['self-start-front-end/mixins/table-common', 'qunit'], function (_tableCommon, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | table common');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var TableCommonObject = Ember.Object.extend(_tableCommon.default);\n    var subject = TableCommonObject.create();\n    assert.ok(subject);\n  });\n});","define('self-start-front-end/tests/unit/models/administrator-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('administrator', 'Unit | Model | administrator', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/answer-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('answer', 'Unit | Model | answer', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/appointment-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('appointment', 'Unit | Model | appointment', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/assessment-test-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('assessment-test', 'Unit | Model | assessment test', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/city-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('city', 'Unit | Model | city', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('country', 'Unit | Model | country', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/exercise-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('exercise-list', 'Unit | Model | exercise list', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/exercise-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('exercise', 'Unit | Model | exercise', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('form', 'Unit | Model | form', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('gender', 'Unit | Model | gender', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/image-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('image', 'Unit | Model | image', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/marital-status-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('marital-status', 'Unit | Model | marital status', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('patient', 'Unit | Model | patient', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/physiotherapest-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('physiotherapest', 'Unit | Model | physiotherapest', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/provinces-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('provinces', 'Unit | Model | provinces', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/question-order-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('question-order', 'Unit | Model | question order', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/question-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('question', 'Unit | Model | question', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/rehab-client-link-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('rehab-client-link', 'Unit | Model | rehab client link', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/rehabilitationplan-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('rehabilitationplan', 'Unit | Model | rehabilitationplan', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/routes/admin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin', 'Unit | Route | admin', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/admin/accounts-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/accounts', 'Unit | Route | admin/accounts', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/admin/admin-welcome-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/admin-welcome', 'Unit | Route | admin/admin welcome', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/admin/forms-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/forms', 'Unit | Route | admin/forms', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/admin/manage-accounts-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/manage-accounts', 'Unit | Route | admin/manage accounts', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/admin/manage-selections-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin/manage-selections', 'Unit | Route | admin/manage selections', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/appointment-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:appointment', 'Unit | Route | appointment', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/city-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:city', 'Unit | Route | city', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/dashboard-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:dashboard', 'Unit | Route | dashboard', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/exercise-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:exercise', 'Unit | Route | exercise', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/exercises-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:exercises', 'Unit | Route | exercises', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/form-display-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:form-display', 'Unit | Route | form display', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/forms-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:forms', 'Unit | Route | forms', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/home-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:home', 'Unit | Route | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/images-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:images', 'Unit | Route | images', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/message-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:message', 'Unit | Route | message', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/new-exercise-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:new-exercise', 'Unit | Route | new exercise', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/new-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:new-patient', 'Unit | Route | new patient', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/new-rehabplans-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:new-rehabplans', 'Unit | Route | new rehabplans', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/patient-file-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:patient-file', 'Unit | Route | patient file', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/patients-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:patients', 'Unit | Route | patients', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/physiotherapists-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:physiotherapists', 'Unit | Route | physiotherapists', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/practitioner/appointment-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:practitioner/appointment', 'Unit | Route | practitioner/appointment', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/practitioner/assessment-display-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:practitioner/assessment-display', 'Unit | Route | practitioner/assessment display', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/practitioner/client-file-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:practitioner/client-file', 'Unit | Route | practitioner/client file', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/practitioner/clients-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:practitioner/clients', 'Unit | Route | practitioner/clients', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/practitioner/edit-menu-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:practitioner/edit-menu', 'Unit | Route | practitioner/edit menu', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/practitioner/exercises-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:practitioner/exercises', 'Unit | Route | practitioner/exercises', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/practitioner/new-rehabplans-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:practitioner/new-rehabplans', 'Unit | Route | practitioner/new rehabplans', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/practitioner/rehabplans-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:practitioner/rehabplans', 'Unit | Route | practitioner/rehabplans', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/province-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:province', 'Unit | Route | province', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/questions-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:questions', 'Unit | Route | questions', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/register-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:register', 'Unit | Route | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/rehabplans-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:rehabplans', 'Unit | Route | rehabplans', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/update-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:update-patient', 'Unit | Route | update patient', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/serializers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('self-start-front-end/tests/unit/serializers/patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('patient', 'Unit | Serializer | patient', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:patient']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('self-start-front-end/tests/unit/services/doc-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:doc', 'Unit | Service | doc', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('self-start-front-end/tests/unit/services/home-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:home', 'Unit | Service | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('self-start-front-end/tests/unit/utils/file-object-test', ['self-start-front-end/utils/file-object', 'qunit'], function (_fileObject, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | file object');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _fileObject.default)();\n    assert.ok(result);\n  });\n});","require('self-start-front-end/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsjvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClluvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;","file":"tests.js"}