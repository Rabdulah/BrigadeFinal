{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","self-start-front-end/tests/app.lint-test.js","self-start-front-end/tests/helpers/destroy-app.js","self-start-front-end/tests/helpers/module-for-acceptance.js","self-start-front-end/tests/helpers/resolver.js","self-start-front-end/tests/helpers/start-app.js","self-start-front-end/tests/integration/components/add-country-test.js","self-start-front-end/tests/integration/components/add-exercises-test.js","self-start-front-end/tests/integration/components/add-form-question-test.js","self-start-front-end/tests/integration/components/add-form-test.js","self-start-front-end/tests/integration/components/add-gender-test.js","self-start-front-end/tests/integration/components/add-patient-test.js","self-start-front-end/tests/integration/components/add-question-test.js","self-start-front-end/tests/integration/components/add-rehabplan-test.js","self-start-front-end/tests/integration/components/add-status-test.js","self-start-front-end/tests/integration/components/admin-nav-test.js","self-start-front-end/tests/integration/components/back-to-top-test.js","self-start-front-end/tests/integration/components/delete-country-test.js","self-start-front-end/tests/integration/components/delete-exercises-test.js","self-start-front-end/tests/integration/components/delete-form-test.js","self-start-front-end/tests/integration/components/delete-gender-test.js","self-start-front-end/tests/integration/components/delete-question-test.js","self-start-front-end/tests/integration/components/delete-rehabplan-test.js","self-start-front-end/tests/integration/components/delete-status-test.js","self-start-front-end/tests/integration/components/edit-exercises-test.js","self-start-front-end/tests/integration/components/edit-rehabplan-test.js","self-start-front-end/tests/integration/components/manage-form-test.js","self-start-front-end/tests/integration/components/modify-question-test.js","self-start-front-end/tests/integration/components/nav-bar-test.js","self-start-front-end/tests/integration/components/parse-question-test.js","self-start-front-end/tests/integration/components/simple-example-test.js","self-start-front-end/tests/integration/components/upload-file-test.js","self-start-front-end/tests/integration/components/view-exercise-test.js","self-start-front-end/tests/integration/components/welcome-page-test.js","self-start-front-end/tests/test-helper.js","self-start-front-end/tests/tests.lint-test.js","self-start-front-end/tests/unit/adapters/application-test.js","self-start-front-end/tests/unit/controllers/home-test.js","self-start-front-end/tests/unit/controllers/rehabplans-test.js","self-start-front-end/tests/unit/models/assesment-test-test.js","self-start-front-end/tests/unit/models/city-test.js","self-start-front-end/tests/unit/models/country-test.js","self-start-front-end/tests/unit/models/exercise-test.js","self-start-front-end/tests/unit/models/exerciseorder-test.js","self-start-front-end/tests/unit/models/form-test.js","self-start-front-end/tests/unit/models/gender-test.js","self-start-front-end/tests/unit/models/image-test.js","self-start-front-end/tests/unit/models/marital-status-test.js","self-start-front-end/tests/unit/models/patient-test.js","self-start-front-end/tests/unit/models/provinces-test.js","self-start-front-end/tests/unit/models/question-test.js","self-start-front-end/tests/unit/models/rehabilitationplan-test.js","self-start-front-end/tests/unit/routes/admin-test.js","self-start-front-end/tests/unit/routes/city-test.js","self-start-front-end/tests/unit/routes/country-test.js","self-start-front-end/tests/unit/routes/exercises-test.js","self-start-front-end/tests/unit/routes/forms-test.js","self-start-front-end/tests/unit/routes/gender-test.js","self-start-front-end/tests/unit/routes/home-test.js","self-start-front-end/tests/unit/routes/manage-selections-test.js","self-start-front-end/tests/unit/routes/marital-status-test.js","self-start-front-end/tests/unit/routes/patients-test.js","self-start-front-end/tests/unit/routes/province-test.js","self-start-front-end/tests/unit/routes/questions-test.js","self-start-front-end/tests/unit/routes/rehabplans-test.js","self-start-front-end/tests/unit/serializers/application-test.js","self-start-front-end/tests/unit/utils/file-object-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('self-start-front-end/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-exercises.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-exercises.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-form-question.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/add-form-question.js should pass ESLint\\n\\n21:17 - \\'self\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/add-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-question.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-question.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-rehabplan.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/add-rehabplan.js should pass ESLint\\n\\n3:7 - \\'Ember\\' is not defined. (no-undef)\\n33:7 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('components/add-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/admin-nav.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/admin-nav.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/back-to-top.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/back-to-top.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-exercises.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-exercises.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-question.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-question.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/delete-rehabplan.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/delete-rehabplan.js should pass ESLint\\n\\n5:7 - \\'Ember\\' is not defined. (no-undef)\\n6:15 - \\'Ember\\' is not defined. (no-undef)\\n12:7 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('components/delete-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/delete-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/edit-exercises.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-exercises.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/edit-rehabplan.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/edit-rehabplan.js should pass ESLint\\n\\n4:7 - \\'Ember\\' is not defined. (no-undef)\\n6:16 - \\'Ember\\' is not defined. (no-undef)\\n7:13 - \\'Ember\\' is not defined. (no-undef)\\n8:9 - \\'Ember\\' is not defined. (no-undef)\\n9:8 - \\'Ember\\' is not defined. (no-undef)\\n10:13 - \\'Ember\\' is not defined. (no-undef)\\n11:14 - \\'Ember\\' is not defined. (no-undef)\\n12:20 - \\'Ember\\' is not defined. (no-undef)\\n14:14 - \\'Ember\\' is not defined. (no-undef)\\n40:7 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('components/manage-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/manage-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/modify-question.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/modify-question.js should pass ESLint\\n\\n32:7 - Unexpected console statement. (no-console)\\n53:21 - \\'i\\' is already defined. (no-redeclare)\\n62:21 - \\'i\\' is already defined. (no-redeclare)\\n70:21 - \\'i\\' is already defined. (no-redeclare)\\n77:21 - \\'i\\' is already defined. (no-redeclare)');\n  });\n\n  QUnit.test('components/nav-bar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/nav-bar.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/parse-question.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/parse-question.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/simple-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/simple-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/upload-file.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/upload-file.js should pass ESLint\\n\\n94:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/view-exercise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/view-exercise.js should pass ESLint\\n\\n4:7 - \\'Ember\\' is not defined. (no-undef)\\n8:5 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('components/welcome-page.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/welcome-page.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/rehabplans.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/rehabplans.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/assesment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/assesment-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/city.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/city.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/exercise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/exercise.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/exerciseorder.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/exerciseorder.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/image.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/image.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/marital-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/marital-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/patient.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/patient.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/province.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/province.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/question.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/question.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/rehabilitationplan.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/rehabilitationplan.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/city.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/city.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/country.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/country.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/exercises.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/exercises.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/forms.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/forms.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/gender.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/gender.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/home.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/home.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/manage-selections.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/manage-selections.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/marital-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/marital-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/patients.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/patients.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/province.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/province.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/questions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/questions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/rehabplans.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rehabplans.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transitions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transitions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/file-object.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/file-object.js should pass ESLint\\n\\n');\n  });\n});","define('self-start-front-end/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('self-start-front-end/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'self-start-front-end/tests/helpers/start-app', 'self-start-front-end/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('self-start-front-end/tests/helpers/resolver', ['exports', 'self-start-front-end/resolver', 'self-start-front-end/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('self-start-front-end/tests/helpers/start-app', ['exports', 'self-start-front-end/app', 'self-start-front-end/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('self-start-front-end/tests/integration/components/add-country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-country', 'Integration | Component | add country', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"YreBgUG/\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-country\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"xKW7HffP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-country\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-exercises-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-exercises', 'Integration | Component | add exercises', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"VI552qOF\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-exercises\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"OgMjPmWR\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-exercises\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-form-question-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-form-question', 'Integration | Component | add form question', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"N7hS9/yd\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-form-question\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"OF+oQeOR\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-form-question\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-form', 'Integration | Component | add form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Ihn44m4a\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-form\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Olta0t7i\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-form\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-gender', 'Integration | Component | add gender', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6EERLDCg\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-gender\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"TyEM9K/M\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-gender\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-patient', 'Integration | Component | add patient', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"BcWXyeh/\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-patient\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DGXfZ60C\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-patient\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-question-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-question', 'Integration | Component | add question', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8Uqx/0cN\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-question\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"7U/Xnr2f\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-question\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-rehabplan-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-rehabplan', 'Integration | Component | add rehabplan', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1Xzau0nh\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-rehabplan\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"W12jr0QV\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-rehabplan\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/add-status-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-status', 'Integration | Component | add status', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"IY4yZuLb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"add-status\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"CTZqDfGX\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"add-status\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/admin-nav-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('admin-nav', 'Integration | Component | admin nav', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"4JDfKsjG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"admin-nav\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"JW31Rcy9\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"admin-nav\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/back-to-top-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('back-to-top', 'Integration | Component | back to top', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kvDsRgkj\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"back-to-top\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DEQE/DCb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"back-to-top\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-country', 'Integration | Component | delete country', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yFqis0JG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-country\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"jnQYPzSi\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-country\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-exercises-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-exercises', 'Integration | Component | delete exercises', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"hNvxw1ed\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-exercises\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"nLyZAXYy\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-exercises\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-form', 'Integration | Component | delete form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6v4kecE7\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-form\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"qpHS4c0j\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-form\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-gender', 'Integration | Component | delete gender', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"uWtaKLC4\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-gender\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Hn6cu5dC\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-gender\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-question-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-question', 'Integration | Component | delete question', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"KKV1s7w+\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-question\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ojQ4YWdb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-question\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-rehabplan-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-rehabplan', 'Integration | Component | delete rehabplan', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"j+4mWThs\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-rehabplan\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"EDtNnsrm\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-rehabplan\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/delete-status-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('delete-status', 'Integration | Component | delete status', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Q4f7Wzo3\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"delete-status\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"0UY6um29\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"delete-status\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-exercises-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-exercises', 'Integration | Component | edit exercises', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"EJIqNr8E\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-exercises\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"JG+BdyoB\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-exercises\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/edit-rehabplan-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('edit-rehabplan', 'Integration | Component | edit rehabplan', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"XFCkeT+W\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"edit-rehabplan\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"zlzl0bjs\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"edit-rehabplan\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/manage-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('manage-form', 'Integration | Component | manage form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3QvFGct2\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"manage-form\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"QvbIQtkp\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"manage-form\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/modify-question-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('modify-question', 'Integration | Component | modify question', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"lnFT5Un5\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"modify-question\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"dEWRlZ9q\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"modify-question\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/nav-bar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('nav-bar', 'Integration | Component | nav bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"23Mh82eG\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"nav-bar\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"rwhJAS6T\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"nav-bar\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/parse-question-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('parse-question', 'Integration | Component | parse question', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3eIW3CM9\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"parse-question\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"bmt3TjJe\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"parse-question\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/simple-example-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('simple-example', 'Integration | Component | simple example', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"TbZjxy9y\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"simple-example\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Hb4ZgQDk\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"simple-example\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/upload-file-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('upload-file', 'Integration | Component | upload file', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"5TkSC30a\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"upload-file\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wD6saKd7\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"upload-file\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/view-exercise-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('view-exercise', 'Integration | Component | view exercise', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"UL2YOI1s\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"view-exercise\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"kX65C177\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"view-exercise\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/integration/components/welcome-page-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('welcome-page', 'Integration | Component | welcome page', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"CH1+OELU\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"welcome-page\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"I47iY4+0\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"welcome-page\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('self-start-front-end/tests/test-helper', ['self-start-front-end/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('self-start-front-end/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-exercises-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-exercises-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-form-question-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-form-question-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-question-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-question-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-rehabplan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-rehabplan-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-status-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-status-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/admin-nav-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/admin-nav-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/back-to-top-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/back-to-top-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-exercises-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-exercises-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-question-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-question-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-rehabplan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-rehabplan-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/delete-status-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/delete-status-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-exercises-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-exercises-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/edit-rehabplan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/edit-rehabplan-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/manage-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/manage-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/modify-question-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/modify-question-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/nav-bar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/nav-bar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/parse-question-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/parse-question-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/simple-example-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/simple-example-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/upload-file-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/upload-file-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/view-exercise-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/view-exercise-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/welcome-page-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/welcome-page-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/home-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/rehabplans-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/rehabplans-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/assesment-test-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/assesment-test-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/city-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/city-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/exercise-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/exercise-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/exerciseorder-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/exerciseorder-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/image-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/image-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/marital-status-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/marital-status-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/patient-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/patient-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/provinces-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/provinces-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/question-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/question-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/rehabilitationplan-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/rehabilitationplan-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/city-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/city-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/country-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/country-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/exercises-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/exercises-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/forms-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/forms-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/gender-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/gender-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/home-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/manage-selections-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/manage-selections-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/marital-status-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/marital-status-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/patients-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/patients-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/province-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/province-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/questions-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/questions-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/rehabplans-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rehabplans-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/file-object-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/file-object-test.js should pass ESLint\\n\\n');\n  });\n});","define('self-start-front-end/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('self-start-front-end/tests/unit/controllers/home-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:home', 'Unit | Controller | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('self-start-front-end/tests/unit/controllers/rehabplans-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:rehabplans', 'Unit | Controller | rehabplans', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('self-start-front-end/tests/unit/models/assesment-test-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('assesment-test', 'Unit | Model | assesment test', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/city-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('city', 'Unit | Model | city', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('country', 'Unit | Model | country', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/exercise-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('exercise', 'Unit | Model | exercise', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/exerciseorder-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('exerciseorder', 'Unit | Model | exerciseorder', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('form', 'Unit | Model | form', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('gender', 'Unit | Model | gender', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/image-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('image', 'Unit | Model | image', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/marital-status-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('marital-status', 'Unit | Model | marital status', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/patient-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('patient', 'Unit | Model | patient', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/provinces-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('provinces', 'Unit | Model | provinces', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/question-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('question', 'Unit | Model | question', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/models/rehabilitationplan-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('rehabilitationplan', 'Unit | Model | rehabilitationplan', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('self-start-front-end/tests/unit/routes/admin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin', 'Unit | Route | admin', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/city-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:city', 'Unit | Route | city', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/country-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:country', 'Unit | Route | country', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/exercises-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:exercises', 'Unit | Route | exercises', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/forms-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:forms', 'Unit | Route | forms', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/gender-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:gender', 'Unit | Route | gender', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/home-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:home', 'Unit | Route | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/manage-selections-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:manage-selections', 'Unit | Route | manage selections', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/marital-status-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:marital-status', 'Unit | Route | marital status', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/patients-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:patients', 'Unit | Route | patients', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/province-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:province', 'Unit | Route | province', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/questions-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:questions', 'Unit | Route | questions', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/routes/rehabplans-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:rehabplans', 'Unit | Route | rehabplans', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('self-start-front-end/tests/unit/serializers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('self-start-front-end/tests/unit/utils/file-object-test', ['self-start-front-end/utils/file-object', 'qunit'], function (_fileObject, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | file object');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _fileObject.default)();\n    assert.ok(result);\n  });\n});","require('self-start-front-end/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingszTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;","file":"tests.js"}